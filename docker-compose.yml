#before running docker-compose file: run node fix_ip.js
version: '3.3'

services:
  # service: 1
  mongoDB:
    image: mongo:latest
    container_name: mongoDB
    restart: always
    ports:
      - '27017:27017'
    networks:
      - backend_network
    volumes:
      - type: volume
        source: mongodb-data
        target: /data/db
    

  # service: 2
  # redisDB:
  #   image: redis:latest
  #   container_name: redisDB
  #   restart: always
  #   ports:
  #     - '6379:6379'
  #   networks:
  #     - backend_network
  #   volumes:
  #     - type: volume
  #       source: redis-data
  #       target: /data

  # service: 3
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    container_name: nodejs_kafka__zookeeper__container
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 30s
      timeout: 10s
      retries: 3
    

  # service: 4
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.24.240.1:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/var/lib/kafka/log
    container_name: nodejs_kafka__kafka__container
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      #     retries: 3
    

volumes:
  mongodb-data:
  # redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  kafka-logs:

networks:
  backend_network:
    driver: bridge